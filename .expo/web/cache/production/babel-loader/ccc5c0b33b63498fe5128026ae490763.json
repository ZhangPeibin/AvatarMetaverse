{"ast":null,"code":"import'@/styles/global.css';import{useEffect}from'react';import{useRouter}from'next/router';import{appWithTranslation}from'next-i18next';import*as ga from'../lib/ga';var MyApp=function MyApp(_ref){var Component=_ref.Component,pageProps=_ref.pageProps;var router=useRouter();useEffect(function(){var handleRouteChange=function handleRouteChange(url){ga.pageview(url);};router.events.on(\"routeChangeComplete\",handleRouteChange);return function(){router.events.off(\"routeChangeComplete\",handleRouteChange);};},[router.events]);return React.createElement(Component,pageProps);};export default appWithTranslation(MyApp);","map":{"version":3,"sources":["E:/scaffold-eth/packages/avatar-metaverse/src/pages/_app.tsx"],"names":["useEffect","useRouter","appWithTranslation","ga","MyApp","Component","pageProps","router","handleRouteChange","url","pageview","events","on","off"],"mappings":"AACA,MAAO,qBAAP,CAEA,OAASA,SAAT,KAA0B,OAA1B,CACA,OAASC,SAAT,KAA0B,aAA1B,CACA,OAASC,kBAAT,KAAmC,cAAnC,CAEA,MAAO,GAAKC,CAAAA,EAAZ,KAAoB,WAApB,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAwC,IAArCC,CAAAA,SAAqC,MAArCA,SAAqC,CAA1BC,SAA0B,MAA1BA,SAA0B,CACpD,GAAMC,CAAAA,MAAM,CAAGN,SAAS,EAAxB,CAEAD,SAAS,CAAC,UAAM,CACd,GAAMQ,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,GAAD,CAAiB,CACzCN,EAAE,CAACO,QAAH,CAAYD,GAAZ,EACD,CAFD,CAKAF,MAAM,CAACI,MAAP,CAAcC,EAAd,uBAAwCJ,iBAAxC,EAGA,MAAO,WAAM,CACXD,MAAM,CAACI,MAAP,CAAcE,GAAd,uBAAyCL,iBAAzC,EACD,CAFD,CAGD,CAZQ,CAYN,CAACD,MAAM,CAACI,MAAR,CAZM,CAAT,CAaA,MAAO,qBAAC,SAAD,CAAeL,SAAf,CAAP,CACD,CAjBD,CAmBA,cAAeJ,CAAAA,kBAAkB,CAACE,KAAD,CAAjC","sourcesContent":["import { AppProps } from 'next/app';\r\nimport '@/styles/global.css';\r\n\r\nimport { useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { appWithTranslation } from 'next-i18next';\r\n\r\nimport * as ga from '../lib/ga';\r\n\r\nconst MyApp = ({ Component, pageProps }: AppProps) => {\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const handleRouteChange = (url: string) => {\r\n      ga.pageview(url);\r\n    };\r\n    // When the component is mounted, subscribe to router changes\r\n    // and log those page views\r\n    router.events.on(`routeChangeComplete`, handleRouteChange);\r\n    // If the component is unmounted, unsubscribe\r\n    // from the event with the `off` method\r\n    return () => {\r\n      router.events.off(`routeChangeComplete`, handleRouteChange);\r\n    };\r\n  }, [router.events]);\r\n  return <Component {...pageProps} />;\r\n};\r\n\r\nexport default appWithTranslation(MyApp);\r\n"]},"metadata":{},"sourceType":"module"}