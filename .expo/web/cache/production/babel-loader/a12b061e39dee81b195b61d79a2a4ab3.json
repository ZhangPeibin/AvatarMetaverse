{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import chromium from'chrome-aws-lambda';function getBrowserInstance(){var executablePath,puppeteer;return _regeneratorRuntime.async(function getBrowserInstance$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(chromium.executablePath);case 2:executablePath=_context.sent;if(executablePath){_context.next=6;break;}puppeteer=require('puppeteer');return _context.abrupt(\"return\",puppeteer.launch({args:chromium.args,headless:true,defaultViewport:{width:1280,height:720},ignoreHTTPSErrors:true}));case 6:return _context.abrupt(\"return\",chromium.puppeteer.launch({args:chromium.args,defaultViewport:{width:1280,height:720},executablePath:executablePath,headless:chromium.headless,ignoreHTTPSErrors:true}));case 7:case\"end\":return _context.stop();}}},null,null,null,Promise);}export default function handler(req,res){var params,config,url,browser,page,svg;return _regeneratorRuntime.async(function handler$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:params=req.query.params;config=JSON.parse(Buffer.from(params,\"base64\").toString());url=process.env.NEXT_PUBLIC_URL+\"?\"+Object.keys(config).map(function(type){return type+\"=\"+encodeURIComponent(config[type]);}).join(\"&\");_context2.prev=3;_context2.next=6;return _regeneratorRuntime.awrap(getBrowserInstance());case 6:browser=_context2.sent;_context2.next=9;return _regeneratorRuntime.awrap(browser.newPage());case 9:page=_context2.sent;_context2.next=12;return _regeneratorRuntime.awrap(page.goto(url));case 12:_context2.next=14;return _regeneratorRuntime.awrap(page.waitForSelector(\"#avatar-preview\"));case 14:_context2.next=16;return _regeneratorRuntime.awrap(page.$eval(\"#avatar-preview > svg\",function(e){return e.outerHTML.replace(/<br>/gi,\"<br/>\");}));case 16:svg=_context2.sent;res.writeHead(200,{'Content-Type':\"image/svg+xml\"}).end(svg);_context2.next=23;break;case 20:_context2.prev=20;_context2.t0=_context2[\"catch\"](3);res.json({status:\"error\",data:(_context2.t0==null?void 0:_context2.t0.message)||\"Something went wrong\"});case 23:_context2.prev=23;if(!(browser!==null)){_context2.next=27;break;}_context2.next=27;return _regeneratorRuntime.awrap(browser.close());case 27:return _context2.finish(23);case 28:case\"end\":return _context2.stop();}}},null,null,[[3,20,23,28]],Promise);}","map":{"version":3,"sources":["E:/scaffold-eth/packages/avatar-metaverse/src/pages/api/svg/[params].ts"],"names":["chromium","getBrowserInstance","executablePath","puppeteer","require","launch","args","headless","defaultViewport","width","height","ignoreHTTPSErrors","handler","req","res","params","query","config","JSON","parse","Buffer","from","toString","url","process","env","NEXT_PUBLIC_URL","Object","keys","map","type","encodeURIComponent","join","browser","newPage","page","goto","waitForSelector","$eval","e","outerHTML","replace","svg","writeHead","end","json","status","data","message","close"],"mappings":"4DACA,MAAOA,CAAAA,QAAP,KAAqB,mBAArB,CAGA,QAAeC,CAAAA,kBAAf,6MAC+BD,QAAQ,CAACE,cADxC,SACQA,cADR,kBAGOA,cAHP,yBAMUC,SANV,CAMsBC,OAAO,CAAC,WAAD,CAN7B,iCAOWD,SAAS,CAACE,MAAV,CAAiB,CACtBC,IAAI,CAAEN,QAAQ,CAACM,IADO,CAEtBC,QAAQ,CAAE,IAFY,CAGtBC,eAAe,CAAE,CACfC,KAAK,CAAE,IADQ,CAEfC,MAAM,CAAE,GAFO,CAHK,CAOtBC,iBAAiB,CAAE,IAPG,CAAjB,CAPX,yCAkBSX,QAAQ,CAACG,SAAT,CAAmBE,MAAnB,CAA0B,CAC/BC,IAAI,CAAEN,QAAQ,CAACM,IADgB,CAE/BE,eAAe,CAAE,CACfC,KAAK,CAAE,IADQ,CAEfC,MAAM,CAAE,GAFO,CAFc,CAM/BR,cAAc,CAAdA,cAN+B,CAO/BK,QAAQ,CAAEP,QAAQ,CAACO,QAPY,CAQ/BI,iBAAiB,CAAE,IARY,CAA1B,CAlBT,uEA8BA,cAAe,SAAeC,CAAAA,OAAf,CACbC,GADa,CAEbC,GAFa,6JAILC,MAJK,CAIMF,GAAG,CAACG,KAJV,CAILD,MAJK,CAOPE,MAPO,CAOEC,IAAI,CAACC,KAAL,CACbC,MAAM,CAACC,IAAP,CAAYN,MAAZ,WAAwCO,QAAxC,EADa,CAPF,CAWPC,GAXO,CAWEC,OAAO,CAACC,GAAR,CAAYC,eAXd,KAWiCC,MAAM,CAACC,IAAP,CAAYX,MAAZ,EAC3CY,GAD2C,CACvC,SAACC,IAAD,QAAaA,CAAAA,IAAb,KAAqBC,kBAAkB,CAACd,MAAM,CAACa,IAAD,CAAP,CAAvC,EADuC,EAE3CE,IAF2C,KAXjC,oEAkBK/B,kBAAkB,EAlBvB,SAkBXgC,OAlBW,kEAmBQA,OAAO,CAACC,OAAR,EAnBR,SAmBLC,IAnBK,mEAqBLA,IAAI,CAACC,IAAL,CAAUb,GAAV,CArBK,6DAsBLY,IAAI,CAACE,eAAL,mBAtBK,6DAwBOF,IAAI,CAACG,KAAL,yBAAoC,SAACC,CAAD,QACpDA,CAAAA,CAAC,CAACC,SAAF,CAAYC,OAAZ,CAAoB,QAApB,SADoD,EAApC,CAxBP,UAwBLC,GAxBK,gBA4BX5B,GAAG,CAAC6B,SAAJ,CAAc,GAAd,CAAmB,CAAE,8BAAF,CAAnB,EAAwDC,GAAxD,CAA4DF,GAA5D,EA5BW,qFA8BX5B,GAAG,CAAC+B,IAAJ,CAAS,CACPC,MAAM,QADC,CAEPC,IAAI,CAAE,wCAAOC,OAAP,yBAFC,CAAT,EA9BW,+BAmCPf,OAAO,GAAK,IAnCL,+EAoCHA,OAAO,CAACgB,KAAR,EApCG","sourcesContent":["import type { NextApiRequest, NextApiResponse } from 'next';\r\nimport chromium from 'chrome-aws-lambda';\r\nimport { AvatarConfigBase, AvatarPart } from '@/types';\r\n\r\nasync function getBrowserInstance() {\r\n  const executablePath = await chromium.executablePath;\r\n\r\n  if (!executablePath) {\r\n    // running locally\r\n    // eslint-disable-next-line\r\n    const puppeteer = require('puppeteer');\r\n    return puppeteer.launch({\r\n      args: chromium.args,\r\n      headless: true,\r\n      defaultViewport: {\r\n        width: 1280,\r\n        height: 720,\r\n      },\r\n      ignoreHTTPSErrors: true,\r\n    });\r\n  }\r\n\r\n  return chromium.puppeteer.launch({\r\n    args: chromium.args,\r\n    defaultViewport: {\r\n      width: 1280,\r\n      height: 720,\r\n    },\r\n    executablePath,\r\n    headless: chromium.headless,\r\n    ignoreHTTPSErrors: true,\r\n  });\r\n}\r\n\r\nexport default async function handler(\r\n  req: NextApiRequest,\r\n  res: NextApiResponse,\r\n) {\r\n  const { params } = req.query;\r\n\r\n  // decode\r\n  const config = JSON.parse(\r\n    Buffer.from(params as string, `base64`).toString(),\r\n  ) as AvatarConfigBase;\r\n\r\n  const url = `${process.env.NEXT_PUBLIC_URL}?${Object.keys(config)\r\n    .map((type) => `${type}=${encodeURIComponent(config[type as AvatarPart])}`)\r\n    .join(`&`)}`;\r\n\r\n  let browser;\r\n\r\n  try {\r\n    browser = await getBrowserInstance();\r\n    const page = await browser.newPage();\r\n\r\n    await page.goto(url);\r\n    await page.waitForSelector(`#avatar-preview`); // wait for the selector to load\r\n\r\n    const svg = await page.$eval(`#avatar-preview > svg`, (e: any) =>\r\n      e.outerHTML.replace(/<br>/gi, `<br/>`),\r\n    ); // declare a variable with an ElementHandle\r\n\r\n    res.writeHead(200, { 'Content-Type': `image/svg+xml` }).end(svg);\r\n  } catch (error: any) {\r\n    res.json({\r\n      status: `error`,\r\n      data: error?.message || `Something went wrong`,\r\n    });\r\n  } finally {\r\n    if (browser !== null) {\r\n      await browser.close();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}