{"ast":null,"code":"import{Skeleton,Typography}from\"antd\";import React from\"react\";import Blockies from\"react-blockies\";import{useLookupAddress}from\"eth-hooks/dapps/ens\";var Text=Typography.Text;var blockExplorerLink=function blockExplorerLink(address,blockExplorer){return(blockExplorer||\"https://etherscan.io/\")+\"address/\"+address;};export default function Address(props){var address=props.value||props.address;var ens=useLookupAddress(props.ensProvider,address);if(!address){return React.createElement(\"span\",null,React.createElement(Skeleton,{avatar:true,paragraph:{rows:1}}));}var displayAddress=address.substr(0,6);var ensSplit=ens&&ens.split(\".\");var validEnsCheck=ensSplit&&ensSplit[ensSplit.length-1]===\"eth\";if(validEnsCheck){displayAddress=ens;}else if(props.size===\"short\"){displayAddress+=\"...\"+address.substr(-4);}else if(props.size===\"long\"){displayAddress=address;}var etherscanLink=blockExplorerLink(address,props.blockExplorer);if(props.minimized){return React.createElement(\"span\",{style:{verticalAlign:\"middle\"}},React.createElement(\"a\",{style:{color:\"#222222\"},target:\"_blank\",href:etherscanLink,rel:\"noopener noreferrer\"},React.createElement(Blockies,{seed:address.toLowerCase(),size:8,scale:2})));}var text;if(props.onChange){text=React.createElement(Text,{editable:{onChange:props.onChange},copyable:{text:address}},React.createElement(\"a\",{style:{color:\"#a4b3c2\"},target:\"_blank\",href:etherscanLink,rel:\"noopener noreferrer\"},displayAddress));}else{text=React.createElement(Text,{copyable:{text:address}},React.createElement(\"a\",{style:{color:\"#a4b3c2\"},target:\"_blank\",href:etherscanLink,rel:\"noopener noreferrer\"},displayAddress));}return React.createElement(\"span\",null,React.createElement(\"span\",{style:{verticalAlign:\"middle\",paddingLeft:5,fontSize:props.fontSize?props.fontSize:28}},text));}","map":{"version":3,"sources":["E:/scaffold-eth/packages/avatar-metaverse/src/pages/components/Address.jsx"],"names":["Skeleton","Typography","React","Blockies","useLookupAddress","Text","blockExplorerLink","address","blockExplorer","Address","props","value","ens","ensProvider","rows","displayAddress","substr","ensSplit","split","validEnsCheck","length","size","etherscanLink","minimized","verticalAlign","color","toLowerCase","text","onChange","paddingLeft","fontSize"],"mappings":"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","sourcesContent":["import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\n\r\n// changed value={address} to address={address}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n*/\r\n\r\nconst { Text } = Typography;\r\n\r\nconst blockExplorerLink = (address, blockExplorer) =>\r\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\r\n\r\nexport default function Address(props) {\r\n  const address = props.value || props.address;\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let displayAddress = address.substr(0, 6);\r\n\r\n  const ensSplit = ens && ens.split(\".\");\r\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\r\n\r\n  if (validEnsCheck) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: \"#222222\"}}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let text;\r\n  if (props.onChange) {\r\n    text = (\r\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: \"#a4b3c2\"}}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  } else {\r\n    text = (\r\n      <Text copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: \"#a4b3c2\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {/*<span style={{ verticalAlign: \"middle\" }}>*/}\r\n      {/*  <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />*/}\r\n      {/*</span>*/}\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {text}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}